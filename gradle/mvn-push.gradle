/*
 * Copyright (C) 2015 Benjamin Bader
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

// Build Javadoc jars for all variants
android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    task("javadoc$name", type: Javadoc, dependsOn: "assemble$name") {
        source = variant.javaCompile.source
        title = "Face Unlock API"

        options.links("http://docs.oracle.com/javase/7/docs/api")
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")

        classpath += files(variant.javaCompile.classpath.files)
        classpath += files(android.getBootClasspath())

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("javadocJar$name", type: Jar, dependsOn: "javadoc$name") {
        classifier = 'javadoc'
        from tasks["javadoc$name"].destinationDir
    }

    project.artifacts.add("archives", tasks["javadocJar$name"])
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getRepoUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepoPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

signing {
    required { isReleaseBuild() }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = VERSION_NAME

            repository(url: POM_STAGING_URL) {
                authentication(userName: getRepoUsername(), password: getRepoPassword())
            }

            snapshotRepository(url: POM_SNAPSHOT_URL) {
                authentication(userName: getRepoUsername(), password: getRepoPassword())
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL
                inceptionYear '2015'

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENSE_NAME
                        url POM_LICENSE_URL
                        distribution POM_LICENSE_DIST
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}
